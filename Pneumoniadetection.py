{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyObfhPk2MsrHmavCsFTHu/e"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"KHlQYQUfoU17"},"outputs":[],"source":["\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","import os\n","from PIL import Image\n","import itertools\n","\n","import cv2\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","sns.set_style('darkgrid')\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix, classification_report\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dropout, Dense, Activation, BatchNormalization\n","from tensorflow.keras import regularizers\n","from tensorflow.keras.optimizers import Adam, Adamax\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","print('Modules Loaded')\n","train_data_path = '/kaggle/input/chest-xray-pneumonia/chest_xray/train'\n","filepaths = []\n","labels = []\n","\n","folds = os.listdir(train_data_path)\n","for fold in folds:\n","    foldpath = os.path.join(train_data_path, fold)\n","    filelist = os.listdir(foldpath)\n","\n","    for file in filelist:\n","        fpath = os.path.join(foldpath, file)\n","        filepaths.append(fpath)\n","        labels.append(fold)\n","\n","FSeries = pd.Series(filepaths, name='filepaths')\n","LSeries = pd.Series(labels, name='label')\n","\n","df = pd.concat([FSeries, LSeries], axis=1)\n","# Preprocessing Valid Dataset\n","\n","valid_data_dir = '/kaggle/input/chest-xray-pneumonia/chest_xray/val'\n","filepaths = []\n","labels = []\n","\n","folds = os.listdir(valid_data_dir)\n","for fold in folds:\n","    foldpath = os.path.join(valid_data_dir, fold)\n","    filelist = os.listdir(foldpath)\n","\n","    for file in filelist:\n","        fpath = os.path.join(foldpath, file)\n","        filepaths.append(fpath)\n","        labels.append(fold)\n","\n","FSeries = pd.Series(filepaths, name='filepaths')\n","LSeries = pd.Series(labels, name='label')\n","\n","valid = pd.concat([FSeries, LSeries], axis=1)\n","df\n","# Preprocessing Test Dataset\n","\n","test_data_dir = '/kaggle/input/chest-xray-pneumonia/chest_xray/test'\n","filepaths = []\n","labels = []\n","\n","folds = os.listdir(test_data_dir)\n","\n","for fold in folds:\n","    foldpath = os.path.join(test_data_dir, fold)\n","    filelist = os.listdir(foldpath)\n","\n","    for file in filelist:\n","        fpath = os.path.join(foldpath, file)\n","        filepaths.append(fpath)\n","        labels.append(fold)\n","\n","FSeries = pd.Series(filepaths, name='filepaths')\n","LSeries = pd.Series(labels, name='label')\n","\n","test = pd.concat([FSeries, LSeries], axis=1)\n","valid\n","test\n","train_df, dummy_df = train_test_split(df, train_size=0.8, shuffle=True, random_state=42)\n","valid_df, test_df = train_test_split(dummy_df, train_size=0.5, shuffle=True, random_state=42)\n","\n","batch_size = 64\n","img_size = (224, 224)\n","tr_gen = ImageDataGenerator()\n","ts_gen = ImageDataGenerator()\n","val_gen = ImageDataGenerator()\n","train_gen = tr_gen.flow_from_dataframe(train_df, x_col='filepaths', y_col='label', target_size=img_size, class_mode='categorical',\n","                                       color_mode='rgb', shuffle=True, batch_size=batch_size)\n","valid_gen = val_gen.flow_from_dataframe(valid_df, x_col='filepaths', y_col='label', target_size=img_size, class_mode='categorical',\n","                                       color_mode='rgb', shuffle=True, batch_size=batch_size)\n","test_gen = ts_gen.flow_from_dataframe(test_df, x_col='filepaths', y_col='label', target_size=img_size, class_mode='categorical',\n","                                     color_mode='rgb', shuffle=False, batch_size=batch_size)\n","from tensorflow.keras.layers import Conv2D, Multiply, Add, Activation\n","\n","def attention_block(input_tensor, filters):\n","    # First convolution layer\n","    conv1 = Conv2D(filters, (3, 3), padding='same')(input_tensor)\n","    conv1 = Activation('relu')(conv1)\n","\n","    # Second convolution layer\n","    conv2 = Conv2D(filters, (3, 3), padding='same')(conv1)\n","    conv2 = Activation('relu')(conv2)\n","\n","    # Attention Mechanism\n","    attn = Add()([conv1, conv2])\n","    attn = Activation('relu')(attn)\n","    attn = Conv2D(1, (1, 1), padding='same')(attn)\n","    attn = Activation('softmax')(attn)\n","\n","    # Multiply the input (features) with the attention map\n","    output_tensor = Multiply()([input_tensor, attn])\n","\n","    return output_tensor\n","\n","# Define the model\n","input_tensor = keras.Input(shape=(224, 224, 3))\n","x = attention_block(input_tensor, 64)\n","x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n","x = MaxPooling2D((2, 2))(x)\n","x = attention_block(x, 128)\n","\n","# another layer\n","# x = Conv2D(256, (3, 3), activation='relu', padding='same')(x)\n","# x = MaxPooling2D((2, 2))(x)\n","# x = attention_block(x, 256)\n","\n","x = Flatten()(x)\n","x = Dense(128, activation='relu')(x)  # Added dense layer\n","x = Dense(64, activation='relu')(x)  # Added another dense layer\n","output_tensor = Dense(2, activation='softmax')(x)\n","\n","model = keras.Model(input_tensor, output_tensor)\n","\n","# Compile the model\n","model.compile(optimizer=\"adam\", loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Train the model\n","history = model.fit(train_gen, validation_data=valid_gen, verbose = 1, epochs=5, batch_size=batch_size)\n","\n","# Evaluate the model\n","loss, accuracy = model.evaluate(test_gen)\n","print(f'Test loss: {loss}, Test accuracy: {accuracy}')\n","tr_acc = history.history['accuracy']\n","tr_loss = history.history['loss']\n","val_acc = history.history['val_accuracy']\n","val_loss = history.history['val_loss']\n","index_loss = np.argmin(val_loss)\n","val_lowest = val_loss[index_loss]\n","index_acc = np.argmax(val_acc)\n","acc_highest = val_acc[index_acc]\n","\n","Epochs = [i+1 for i in range(len(tr_acc))]\n","loss_label = f'best epoch= {str(index_loss + 1)}'\n","acc_label = f'best epoch= {str(index_acc + 1)}'\n","\n","# Plot training history\n","plt.figure(figsize= (20, 8))\n","plt.style.use('fivethirtyeight')\n","\n","plt.subplot(1, 2, 1)\n","plt.plot(Epochs, tr_loss, 'r', label= 'Training loss')\n","plt.plot(Epochs, val_loss, 'g', label= 'Validation loss')\n","plt.scatter(index_loss + 1, val_lowest, s= 150, c= 'blue', label= loss_label)\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(Epochs, tr_acc, 'r', label= 'Training Accuracy')\n","plt.plot(Epochs, val_acc, 'g', label= 'Validation Accuracy')\n","plt.scatter(index_acc + 1 , acc_highest, s= 150, c= 'blue', label= acc_label)\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","plt.tight_layout\n","plt.show()\n","train_score = model.evaluate(train_gen, verbose= 1)\n","valid_score = model.evaluate(valid_gen, verbose= 1)\n","test_score = model.evaluate(test_gen, verbose= 1)\n","\n","print(\"Train Loss: \", train_score[0])\n","print(\"Train Accuracy: \", train_score[1])\n","print('-' * 20)\n","print(\"Validation Loss: \", valid_score[0])\n","print(\"Validation Accuracy: \", valid_score[1])\n","print('-' * 20)\n","print(\"Test Loss: \", test_score[0])\n","print(\"Test Accuracy: \", test_score[1])\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Predictions on test data\n","y_pred = model.predict(test_gen)\n","y_pred_classes = np.argmax(y_pred, axis=1)\n","\n","# True labels\n","y_true = test_gen.classes\n","\n","# Classification Report\n","print(\"Classification Report:\")\n","print(classification_report(y_true, y_pred_classes))\n","\n","# Confusion Matrix\n","conf_mat = confusion_matrix(y_true, y_pred_classes)\n","\n","# Plot Confusion Matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=test_gen.class_indices.keys(),\n","            yticklabels=test_gen.class_indices.keys())\n","plt.title('Confusion Matrix')\n","plt.xlabel('Predicted Label')\n","plt.ylabel('True Label')\n","plt.show()\n","# Save the model\n","model.save('/kaggle/working/Classfication_model.h5')\n","model.summary()\n","from tensorflow.keras.models import load_model\n","from PIL import Image\n","\n","# Load the saved model\n","loaded_model = model\n","\n","# Define class labels\n","class_labels = [\"NORMAL\", \"PNEUMONIA\"]\n","\n","# Function to preprocess the input image\n","def preprocess_image(image_path):\n","    img = Image.open(image_path)\n","    img = img.resize((224, 224))\n","    img = np.array(img)\n","    img = img / 255.0  # Normalize the image\n","    img = np.expand_dims(img, axis=-1)  # Add channel dimension\n","    img = np.repeat(img, 3, axis=-1)  # Repeat grayscale image to have 3 channels\n","    img = np.expand_dims(img, axis=0)  # Add batch dimension\n","    return img\n","\n","# Function to make predictions\n","def predict_image(model, image_path):\n","    preprocessed_img = preprocess_image(image_path)\n","    prediction = model.predict(preprocessed_img)\n","    return prediction\n","\n","# Function to get predicted class and probability\n","def get_predicted_class(prediction):\n","    predicted_class_index = np.argmax(prediction)\n","    predicted_class = class_labels[predicted_class_index]\n","    probability = prediction[0][predicted_class_index]\n","    return predicted_class, probability\n","\n","# Example usage\n","image_path = '/kaggle/input/chest-xray-pneumonia/chest_xray/train/NORMAL/IM-0119-0001.jpeg'\n","prediction = predict_image(loaded_model, image_path)\n","predicted_class, probability = get_predicted_class(prediction)\n","print(\"Predicted Class:\", predicted_class)\n","print(\"Probability:\", probability)"]}]}